{"version":3,"file":"component---src-pages-blog-jsx-c44f3ec1cab3ceaa7e93.js","mappings":"qJAWA,SAASA,EAAGC,GAAsC,IAArC,YAAEC,EAAW,KAAEC,EAAI,KAAEC,EAAI,MAAEC,GAAOJ,EAC7C,MAAM,KAAEK,IAASC,EAAAA,EAAAA,gBAAe,YAc1BC,EAAkBN,GAAeI,EAAKG,aAAaP,YAEzD,OACEQ,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CACLC,eAAgB,CACdT,QAEFE,MAAOA,EACPQ,cAAa,QAAUP,EAAKG,aAAaJ,MACzCD,KAAM,CACJ,CACEU,KAAM,cACNC,QAASP,GAEX,CACEQ,SAAU,WACVD,QAASV,GAEX,CACEW,SAAU,iBACVD,QAASP,GAEX,CACEQ,SAAU,UACVD,QAAS,WAEX,CACED,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,QAAST,EAAKG,aAAaQ,QAE7B,CACEH,KAAM,gBACNC,QAASV,GAEX,CACES,KAAM,sBACNC,QAASP,IAEXU,OAAOd,IAGf,CAEAJ,EAAImB,aAAe,CACjBhB,KAAM,KACNC,KAAM,GACNF,YAAa,IAUf,K,0EC7CA,UApCaD,IAAe,IAAd,KAAEmB,GAAMnB,EACpB,MAAMoB,EAAQD,EAAKE,kBAAkBC,MAErC,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEhB,EAAAA,EAAAA,KAACV,EAAAA,EAAG,CAACK,MAAM,UACXK,EAAAA,EAAAA,KAAA,MAAAgB,SAAI,SACHL,EAAMM,KAAIC,IAAe,IAAd,KAAEC,GAAMD,EAClB,MAAMvB,EAAQwB,EAAKC,YAAYzB,OAASwB,EAAKE,OAAOC,KAEpD,OACER,EAAAA,EAAAA,MAAA,WAAAE,SAAA,EACEF,EAAAA,EAAAA,MAAA,UAAAE,SAAA,EACEhB,EAAAA,EAAAA,KAAA,MACEuB,MAAO,CACLC,cAAcC,EAAAA,EAAAA,IAAO,EAAI,IACzBT,UAEFhB,EAAAA,EAAAA,KAAC0B,EAAAA,KAAI,CAACC,GAAIR,EAAKE,OAAOC,KAAKN,SAAErB,OAE/BK,EAAAA,EAAAA,KAAA,SAAAgB,SAAQG,EAAKC,YAAYQ,WAE3B5B,EAAAA,EAAAA,KAAA,WAAAgB,UACEhB,EAAAA,EAAAA,KAAA,KACE6B,wBAAyB,CACvBC,OAAQX,EAAKC,YAAY5B,aAAe2B,EAAKY,eAdvCZ,EAAKE,OAAOC,KAkBhB,MAGb,C","sources":["webpack://mikeup.church/./src/components/seo.jsx","webpack://mikeup.church/./src/pages/blog.jsx"],"sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `,\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: 'description',\n          content: metaDescription,\n        },\n        {\n          property: 'og:title',\n          content: title,\n        },\n        {\n          property: 'og:description',\n          content: metaDescription,\n        },\n        {\n          property: 'og:type',\n          content: 'website',\n        },\n        {\n          name: 'twitter:card',\n          content: 'summary',\n        },\n        {\n          name: 'twitter:creator',\n          content: site.siteMetadata.author,\n        },\n        {\n          name: 'twitter:title',\n          content: title,\n        },\n        {\n          name: 'twitter:description',\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: 'en',\n  meta: [],\n  description: '',\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n","import { Link, graphql } from 'gatsby';\n\nimport SEO from '../components/seo';\nimport { rhythm } from '../utils/typography';\n\nconst Blog = ({ data }) => {\n  const posts = data.allMarkdownRemark.edges;\n\n  return (\n    <>\n      <SEO title='Blog' />\n      <h1>Blog</h1>\n      {posts.map(({ node }) => {\n        const title = node.frontmatter.title || node.fields.slug;\n\n        return (\n          <article key={node.fields.slug}>\n            <header>\n              <h3\n                style={{\n                  marginBottom: rhythm(1 / 4),\n                }}\n              >\n                <Link to={node.fields.slug}>{title}</Link>\n              </h3>\n              <small>{node.frontmatter.date}</small>\n            </header>\n            <section>\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: node.frontmatter.description || node.excerpt,\n                }}\n              />\n            </section>\n          </article>\n        );\n      })}\n    </>\n  );\n};\n\nexport default Blog;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/(blog)/\" } }\n      sort: { frontmatter: { date: DESC } }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 125)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["SEO","_ref","description","lang","meta","title","site","useStaticQuery","metaDescription","siteMetadata","_jsx","Helmet","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","data","posts","allMarkdownRemark","edges","_jsxs","_Fragment","children","map","_ref2","node","frontmatter","fields","slug","style","marginBottom","rhythm","Link","to","date","dangerouslySetInnerHTML","__html","excerpt"],"sourceRoot":""}