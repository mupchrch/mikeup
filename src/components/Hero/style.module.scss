@use 'sass:math';
@use '../../styles/mixins.scss';

.hero {
  position: absolute;
  z-index: -1;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  background: radial-gradient(circle at bottom, var(--foreground-color) 0%, var(--background-color) 100%);
  overflow: hidden;
  opacity: 0;

  @include mixins.animateOpacity(0.5s);
}

.playPause {
  background: none;
  border: none;
  color: var(--body-color);
  position: absolute;
  right: 1em;
  bottom: 1em;
  transition: opacity 0.5s;
  z-index: 100;
  opacity: 0;
  cursor: pointer;
}

$munStart: translate(-100%, -25%);
$munEnd: translate(-45%, -45%);
$munHide: translate(-100%, -100%);
.mun {
  position: absolute;
  width: 50%;
  min-width: 300px;
  transform: $munStart;
}

$earthStart: translateY(100vh) rotateZ(299deg);
$earthEnd: translateY(85vh) rotateZ(295deg);
.earth {
  position: relative;
  width: 200%;
  transform: $earthStart;
  left: -50vw;
  z-index: 10;
}

.paused {
  animation-play-state: paused !important;
}

/*** STARS ***/

$screenSize: 4000;
$totalPixels: $screenSize * $screenSize;
$numFarStars:  0.00003 * $totalPixels;
$numMidStars:  0.000006 * $totalPixels;
$numNearStars: 0.000003 * $totalPixels;

@function generateBoxShadowDots ($numDots) {
  $value: '#{random($screenSize)}px #{random($screenSize)}px var(--body-color)';
  @for $i from 2 through $numDots {
    $value: '#{$value} , #{random($screenSize)}px #{random($screenSize)}px var(--body-color)';
  }

  @return unquote($value);
}

.farStars {
  $starsBoxShadow: generateBoxShadowDots($numFarStars);
  $starSize: 1px;

  width: $starSize;
  height: $starSize;
  box-shadow: $starsBoxShadow;

  @include mixins.animateLoop(farStars, #{math.div($screenSize, 20)}s) {
    from { transform: translateY(0); }
    to { transform: translateY(-#{$screenSize}px); }
  }

  &:after {
    content: '';
    position: absolute;
    top: #{$screenSize}px;
    width: $starSize;
    height: $starSize;
    box-shadow: $starsBoxShadow;
  }
}

.midStars {
  $starsBoxShadow: generateBoxShadowDots($numMidStars);
  $starSize: 2px;

  width: $starSize;
  height: $starSize;
  box-shadow: $starsBoxShadow;

  @include mixins.animateLoop(farStars, #{math.div($screenSize, 40)}s) {
    from { transform: translateY(0); }
    to { transform: translateY(-#{$screenSize}px); }
  }

  &:after {
    content: '';
    position: absolute;
    top: #{$screenSize}px;
    width: $starSize;
    height: $starSize;
    box-shadow: $starsBoxShadow;
  }
}

.nearStars {
  $starsBoxShadow: generateBoxShadowDots($numNearStars);
  $starSize: 3px;

  width: $starSize;
  height: $starSize;
  box-shadow: $starsBoxShadow;

  @include mixins.animateLoop(farStars, #{math.div($screenSize, 60)}s) {
    from { transform: translateY(0); }
    to { transform: translateY(-#{$screenSize}px); }
  }

  &:after {
    content: '';
    position: absolute;
    top: #{$screenSize}px;
    width: $starSize;
    height: $starSize;
    box-shadow: $starsBoxShadow;
  }
}

/*** TRANSITIONS ***/

$enterExitSpeed: 1s;
$planetEnterExitTransition: transform $enterExitSpeed;

:global(.hero-appear) {
  opacity: 1;

  .mun {
    transition: 5s 1s cubic-bezier(0.165, 0.84, 0.44, 1);
    transform: $munStart;
  }

  .earth {
    transition: transform 3s 2s ease-out;
    transform: $earthStart;
  }
}

:global(.hero-appear-active),
:global(.hero-appear-done),
:global(.hero-enter-active),
:global(.hero-enter-done) {
  .mun {
    transform: $munEnd !important;
  }

  .earth {
    transform: $earthEnd !important;
  }
}

:global(.hero-exit) {
  .mun {
    transition: $planetEnterExitTransition;
    transform: $munEnd;
  }

  .earth {
    transition: $planetEnterExitTransition;
    transform: $earthEnd;
  }
}

:global(.hero-exit-active),
:global(.hero-exit-done) {
  .mun {
    transform: $munHide;
  }

  .earth {
    transform: $earthStart;
  }
}

:global(.hero-enter:not(.hero-appear)) {
  .mun {
    transition: $planetEnterExitTransition;
    transform: $munHide;
  }

  .earth {
    transition: $planetEnterExitTransition;
    transform: $earthStart;
  }
}

:global(.playPause-enter-active),
:global(.playPause-enter-done) {
  opacity: 1;
}